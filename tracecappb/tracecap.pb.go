// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.6.1
// source: tracecap.proto

package tracecappb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SampleScope int32

const (
	SampleScope_UNKNOWN   SampleScope = 0
	SampleScope_KERNEL    SampleScope = 1
	SampleScope_USERSPACE SampleScope = 2
	SampleScope_VM_RUBY   SampleScope = 3
)

// Enum value maps for SampleScope.
var (
	SampleScope_name = map[int32]string{
		0: "UNKNOWN",
		1: "KERNEL",
		2: "USERSPACE",
		3: "VM_RUBY",
	}
	SampleScope_value = map[string]int32{
		"UNKNOWN":   0,
		"KERNEL":    1,
		"USERSPACE": 2,
		"VM_RUBY":   3,
	}
)

func (x SampleScope) Enum() *SampleScope {
	p := new(SampleScope)
	*p = x
	return p
}

func (x SampleScope) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SampleScope) Descriptor() protoreflect.EnumDescriptor {
	return file_tracecap_proto_enumTypes[0].Descriptor()
}

func (SampleScope) Type() protoreflect.EnumType {
	return &file_tracecap_proto_enumTypes[0]
}

func (x SampleScope) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SampleScope.Descriptor instead.
func (SampleScope) EnumDescriptor() ([]byte, []int) {
	return file_tracecap_proto_rawDescGZIP(), []int{0}
}

type SamplePurpose int32

const (
	SamplePurpose_MISC    SamplePurpose = 0
	SamplePurpose_TRACE   SamplePurpose = 1
	SamplePurpose_PROFILE SamplePurpose = 2
)

// Enum value maps for SamplePurpose.
var (
	SamplePurpose_name = map[int32]string{
		0: "MISC",
		1: "TRACE",
		2: "PROFILE",
	}
	SamplePurpose_value = map[string]int32{
		"MISC":    0,
		"TRACE":   1,
		"PROFILE": 2,
	}
)

func (x SamplePurpose) Enum() *SamplePurpose {
	p := new(SamplePurpose)
	*p = x
	return p
}

func (x SamplePurpose) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SamplePurpose) Descriptor() protoreflect.EnumDescriptor {
	return file_tracecap_proto_enumTypes[1].Descriptor()
}

func (SamplePurpose) Type() protoreflect.EnumType {
	return &file_tracecap_proto_enumTypes[1]
}

func (x SamplePurpose) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SamplePurpose.Descriptor instead.
func (SamplePurpose) EnumDescriptor() ([]byte, []int) {
	return file_tracecap_proto_rawDescGZIP(), []int{1}
}

type Thread struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InternalId uint64 `protobuf:"varint,1,opt,name=internal_id,json=internalId,proto3" json:"internal_id,omitempty"`
	StartTime  uint64 `protobuf:"varint,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime    uint64 `protobuf:"varint,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Tid        uint32 `protobuf:"varint,4,opt,name=tid,proto3" json:"tid,omitempty"`
}

func (x *Thread) Reset() {
	*x = Thread{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tracecap_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Thread) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Thread) ProtoMessage() {}

func (x *Thread) ProtoReflect() protoreflect.Message {
	mi := &file_tracecap_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Thread.ProtoReflect.Descriptor instead.
func (*Thread) Descriptor() ([]byte, []int) {
	return file_tracecap_proto_rawDescGZIP(), []int{0}
}

func (x *Thread) GetInternalId() uint64 {
	if x != nil {
		return x.InternalId
	}
	return 0
}

func (x *Thread) GetStartTime() uint64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *Thread) GetEndTime() uint64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *Thread) GetTid() uint32 {
	if x != nil {
		return x.Tid
	}
	return 0
}

type Process struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InternalId uint64    `protobuf:"varint,1,opt,name=internal_id,json=internalId,proto3" json:"internal_id,omitempty"`
	StartTime  uint64    `protobuf:"varint,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime    uint64    `protobuf:"varint,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Pid        uint32    `protobuf:"varint,4,opt,name=pid,proto3" json:"pid,omitempty"`
	ExecName   string    `protobuf:"bytes,5,opt,name=exec_name,json=execName,proto3" json:"exec_name,omitempty"`
	Threads    []*Thread `protobuf:"bytes,16,rep,name=threads,proto3" json:"threads,omitempty"`
}

func (x *Process) Reset() {
	*x = Process{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tracecap_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Process) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Process) ProtoMessage() {}

func (x *Process) ProtoReflect() protoreflect.Message {
	mi := &file_tracecap_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Process.ProtoReflect.Descriptor instead.
func (*Process) Descriptor() ([]byte, []int) {
	return file_tracecap_proto_rawDescGZIP(), []int{1}
}

func (x *Process) GetInternalId() uint64 {
	if x != nil {
		return x.InternalId
	}
	return 0
}

func (x *Process) GetStartTime() uint64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *Process) GetEndTime() uint64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *Process) GetPid() uint32 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *Process) GetExecName() string {
	if x != nil {
		return x.ExecName
	}
	return ""
}

func (x *Process) GetThreads() []*Thread {
	if x != nil {
		return x.Threads
	}
	return nil
}

type ObjectSpaceSample struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total uint64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Free  uint64 `protobuf:"varint,2,opt,name=free,proto3" json:"free,omitempty"`
}

func (x *ObjectSpaceSample) Reset() {
	*x = ObjectSpaceSample{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tracecap_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectSpaceSample) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectSpaceSample) ProtoMessage() {}

func (x *ObjectSpaceSample) ProtoReflect() protoreflect.Message {
	mi := &file_tracecap_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectSpaceSample.ProtoReflect.Descriptor instead.
func (*ObjectSpaceSample) Descriptor() ([]byte, []int) {
	return file_tracecap_proto_rawDescGZIP(), []int{2}
}

func (x *ObjectSpaceSample) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ObjectSpaceSample) GetFree() uint64 {
	if x != nil {
		return x.Free
	}
	return 0
}

type StackFrame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	File    string `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
	Line    uint32 `protobuf:"varint,2,opt,name=line,proto3" json:"line,omitempty"`
	Method  string `protobuf:"bytes,3,opt,name=method,proto3" json:"method,omitempty"`
	Package string `protobuf:"bytes,4,opt,name=package,proto3" json:"package,omitempty"`
}

func (x *StackFrame) Reset() {
	*x = StackFrame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tracecap_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StackFrame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StackFrame) ProtoMessage() {}

func (x *StackFrame) ProtoReflect() protoreflect.Message {
	mi := &file_tracecap_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StackFrame.ProtoReflect.Descriptor instead.
func (*StackFrame) Descriptor() ([]byte, []int) {
	return file_tracecap_proto_rawDescGZIP(), []int{3}
}

func (x *StackFrame) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

func (x *StackFrame) GetLine() uint32 {
	if x != nil {
		return x.Line
	}
	return 0
}

func (x *StackFrame) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *StackFrame) GetPackage() string {
	if x != nil {
		return x.Package
	}
	return ""
}

type StackSample struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stack []*StackFrame `protobuf:"bytes,1,rep,name=stack,proto3" json:"stack,omitempty"`
}

func (x *StackSample) Reset() {
	*x = StackSample{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tracecap_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StackSample) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StackSample) ProtoMessage() {}

func (x *StackSample) ProtoReflect() protoreflect.Message {
	mi := &file_tracecap_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StackSample.ProtoReflect.Descriptor instead.
func (*StackSample) Descriptor() ([]byte, []int) {
	return file_tracecap_proto_rawDescGZIP(), []int{4}
}

func (x *StackSample) GetStack() []*StackFrame {
	if x != nil {
		return x.Stack
	}
	return nil
}

type SpanSample struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime     uint64 `protobuf:"varint,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime       uint64 `protobuf:"varint,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Id            string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	ParentId      string `protobuf:"bytes,4,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	ComponentName string `protobuf:"bytes,5,opt,name=component_name,json=componentName,proto3" json:"component_name,omitempty"`
	Description   string `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	QueueTime     uint64 `protobuf:"varint,7,opt,name=queue_time,json=queueTime,proto3" json:"queue_time,omitempty"`
}

func (x *SpanSample) Reset() {
	*x = SpanSample{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tracecap_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpanSample) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpanSample) ProtoMessage() {}

func (x *SpanSample) ProtoReflect() protoreflect.Message {
	mi := &file_tracecap_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpanSample.ProtoReflect.Descriptor instead.
func (*SpanSample) Descriptor() ([]byte, []int) {
	return file_tracecap_proto_rawDescGZIP(), []int{5}
}

func (x *SpanSample) GetStartTime() uint64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *SpanSample) GetEndTime() uint64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *SpanSample) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SpanSample) GetParentId() string {
	if x != nil {
		return x.ParentId
	}
	return ""
}

func (x *SpanSample) GetComponentName() string {
	if x != nil {
		return x.ComponentName
	}
	return ""
}

func (x *SpanSample) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SpanSample) GetQueueTime() uint64 {
	if x != nil {
		return x.QueueTime
	}
	return 0
}

type Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Types that are assignable to Value:
	//	*Metadata_MetaString
	Value isMetadata_Value `protobuf_oneof:"value"`
}

func (x *Metadata) Reset() {
	*x = Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tracecap_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata) ProtoMessage() {}

func (x *Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_tracecap_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata.ProtoReflect.Descriptor instead.
func (*Metadata) Descriptor() ([]byte, []int) {
	return file_tracecap_proto_rawDescGZIP(), []int{6}
}

func (x *Metadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (m *Metadata) GetValue() isMetadata_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Metadata) GetMetaString() string {
	if x, ok := x.GetValue().(*Metadata_MetaString); ok {
		return x.MetaString
	}
	return ""
}

type isMetadata_Value interface {
	isMetadata_Value()
}

type Metadata_MetaString struct {
	MetaString string `protobuf:"bytes,2,opt,name=meta_string,json=metaString,proto3,oneof"`
}

func (*Metadata_MetaString) isMetadata_Value() {}

type ThreadSample struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionTime   uint64             `protobuf:"varint,1,opt,name=collection_time,json=collectionTime,proto3" json:"collection_time,omitempty"`
	ThreadInternalId uint64             `protobuf:"varint,2,opt,name=thread_internal_id,json=threadInternalId,proto3" json:"thread_internal_id,omitempty"`
	Scope            SampleScope        `protobuf:"varint,3,opt,name=scope,proto3,enum=tracecap.SampleScope" json:"scope,omitempty"`
	Purpose          SamplePurpose      `protobuf:"varint,4,opt,name=purpose,proto3,enum=tracecap.SamplePurpose" json:"purpose,omitempty"`
	Metadata         []*Metadata        `protobuf:"bytes,10,rep,name=metadata,proto3" json:"metadata,omitempty"`
	ObjectSpace      *ObjectSpaceSample `protobuf:"bytes,16,opt,name=object_space,json=objectSpace,proto3" json:"object_space,omitempty"`
	Stack            *StackSample       `protobuf:"bytes,17,opt,name=stack,proto3" json:"stack,omitempty"`
	Span             *SpanSample        `protobuf:"bytes,18,opt,name=span,proto3" json:"span,omitempty"`
}

func (x *ThreadSample) Reset() {
	*x = ThreadSample{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tracecap_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThreadSample) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThreadSample) ProtoMessage() {}

func (x *ThreadSample) ProtoReflect() protoreflect.Message {
	mi := &file_tracecap_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThreadSample.ProtoReflect.Descriptor instead.
func (*ThreadSample) Descriptor() ([]byte, []int) {
	return file_tracecap_proto_rawDescGZIP(), []int{7}
}

func (x *ThreadSample) GetCollectionTime() uint64 {
	if x != nil {
		return x.CollectionTime
	}
	return 0
}

func (x *ThreadSample) GetThreadInternalId() uint64 {
	if x != nil {
		return x.ThreadInternalId
	}
	return 0
}

func (x *ThreadSample) GetScope() SampleScope {
	if x != nil {
		return x.Scope
	}
	return SampleScope_UNKNOWN
}

func (x *ThreadSample) GetPurpose() SamplePurpose {
	if x != nil {
		return x.Purpose
	}
	return SamplePurpose_MISC
}

func (x *ThreadSample) GetMetadata() []*Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ThreadSample) GetObjectSpace() *ObjectSpaceSample {
	if x != nil {
		return x.ObjectSpace
	}
	return nil
}

func (x *ThreadSample) GetStack() *StackSample {
	if x != nil {
		return x.Stack
	}
	return nil
}

func (x *ThreadSample) GetSpan() *SpanSample {
	if x != nil {
		return x.Span
	}
	return nil
}

type TraceFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Processes []*Process      `protobuf:"bytes,1,rep,name=processes,proto3" json:"processes,omitempty"`
	Samples   []*ThreadSample `protobuf:"bytes,2,rep,name=samples,proto3" json:"samples,omitempty"`
}

func (x *TraceFile) Reset() {
	*x = TraceFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tracecap_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraceFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceFile) ProtoMessage() {}

func (x *TraceFile) ProtoReflect() protoreflect.Message {
	mi := &file_tracecap_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceFile.ProtoReflect.Descriptor instead.
func (*TraceFile) Descriptor() ([]byte, []int) {
	return file_tracecap_proto_rawDescGZIP(), []int{8}
}

func (x *TraceFile) GetProcesses() []*Process {
	if x != nil {
		return x.Processes
	}
	return nil
}

func (x *TraceFile) GetSamples() []*ThreadSample {
	if x != nil {
		return x.Samples
	}
	return nil
}

var File_tracecap_proto protoreflect.FileDescriptor

var file_tracecap_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x63, 0x61, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x08, 0x74, 0x72, 0x61, 0x63, 0x65, 0x63, 0x61, 0x70, 0x22, 0x75, 0x0a, 0x06, 0x54, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x74, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x74, 0x69,
	0x64, 0x22, 0xbf, 0x01, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x78,
	0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65,
	0x78, 0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x07, 0x74, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x63, 0x61, 0x70, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x07, 0x74, 0x68, 0x72, 0x65,
	0x61, 0x64, 0x73, 0x22, 0x3d, 0x0a, 0x11, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x12,
	0x0a, 0x04, 0x66, 0x72, 0x65, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x66, 0x72,
	0x65, 0x65, 0x22, 0x66, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x66, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x22, 0x39, 0x0a, 0x0b, 0x53, 0x74,
	0x61, 0x63, 0x6b, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x63, 0x6b, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x63, 0x61, 0x70, 0x2e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x63, 0x6b, 0x22, 0xdb, 0x01, 0x0a, 0x0a, 0x53, 0x70, 0x61, 0x6e, 0x53, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x71, 0x75, 0x65, 0x75, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0x4a, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x61,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x8c, 0x03, 0x0a, 0x0c, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x63, 0x61,
	0x70, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x05, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x63, 0x61, 0x70,
	0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x50, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x52, 0x07,
	0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x63, 0x61, 0x70, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3e, 0x0a, 0x0c, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x63, 0x61, 0x70, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x0b, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x63, 0x6b,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x63, 0x61,
	0x70, 0x2e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x63, 0x6b, 0x12, 0x28, 0x0a, 0x04, 0x73, 0x70, 0x61, 0x6e, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x63, 0x61, 0x70, 0x2e, 0x53, 0x70,
	0x61, 0x6e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x04, 0x73, 0x70, 0x61, 0x6e, 0x22, 0x6e,
	0x0a, 0x09, 0x54, 0x72, 0x61, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x2f, 0x0a, 0x09, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x63, 0x61, 0x70, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x07,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x63, 0x61, 0x70, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x07, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2a, 0x42,
	0x0a, 0x0b, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x0b, 0x0a,
	0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4b, 0x45,
	0x52, 0x4e, 0x45, 0x4c, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x53, 0x45, 0x52, 0x53, 0x50,
	0x41, 0x43, 0x45, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x56, 0x4d, 0x5f, 0x52, 0x55, 0x42, 0x59,
	0x10, 0x03, 0x2a, 0x31, 0x0a, 0x0d, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x50, 0x75, 0x72, 0x70,
	0x6f, 0x73, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x49, 0x53, 0x43, 0x10, 0x00, 0x12, 0x09, 0x0a,
	0x05, 0x54, 0x52, 0x41, 0x43, 0x45, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x52, 0x4f, 0x46,
	0x49, 0x4c, 0x45, 0x10, 0x02, 0x42, 0x19, 0x5a, 0x17, 0x2e, 0x2f, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x63, 0x61, 0x70, 0x70, 0x62, 0x3b, 0x74, 0x72, 0x61, 0x63, 0x65, 0x63, 0x61, 0x70, 0x70, 0x62,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tracecap_proto_rawDescOnce sync.Once
	file_tracecap_proto_rawDescData = file_tracecap_proto_rawDesc
)

func file_tracecap_proto_rawDescGZIP() []byte {
	file_tracecap_proto_rawDescOnce.Do(func() {
		file_tracecap_proto_rawDescData = protoimpl.X.CompressGZIP(file_tracecap_proto_rawDescData)
	})
	return file_tracecap_proto_rawDescData
}

var file_tracecap_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_tracecap_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_tracecap_proto_goTypes = []interface{}{
	(SampleScope)(0),          // 0: tracecap.SampleScope
	(SamplePurpose)(0),        // 1: tracecap.SamplePurpose
	(*Thread)(nil),            // 2: tracecap.Thread
	(*Process)(nil),           // 3: tracecap.Process
	(*ObjectSpaceSample)(nil), // 4: tracecap.ObjectSpaceSample
	(*StackFrame)(nil),        // 5: tracecap.StackFrame
	(*StackSample)(nil),       // 6: tracecap.StackSample
	(*SpanSample)(nil),        // 7: tracecap.SpanSample
	(*Metadata)(nil),          // 8: tracecap.Metadata
	(*ThreadSample)(nil),      // 9: tracecap.ThreadSample
	(*TraceFile)(nil),         // 10: tracecap.TraceFile
}
var file_tracecap_proto_depIdxs = []int32{
	2,  // 0: tracecap.Process.threads:type_name -> tracecap.Thread
	5,  // 1: tracecap.StackSample.stack:type_name -> tracecap.StackFrame
	0,  // 2: tracecap.ThreadSample.scope:type_name -> tracecap.SampleScope
	1,  // 3: tracecap.ThreadSample.purpose:type_name -> tracecap.SamplePurpose
	8,  // 4: tracecap.ThreadSample.metadata:type_name -> tracecap.Metadata
	4,  // 5: tracecap.ThreadSample.object_space:type_name -> tracecap.ObjectSpaceSample
	6,  // 6: tracecap.ThreadSample.stack:type_name -> tracecap.StackSample
	7,  // 7: tracecap.ThreadSample.span:type_name -> tracecap.SpanSample
	3,  // 8: tracecap.TraceFile.processes:type_name -> tracecap.Process
	9,  // 9: tracecap.TraceFile.samples:type_name -> tracecap.ThreadSample
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_tracecap_proto_init() }
func file_tracecap_proto_init() {
	if File_tracecap_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tracecap_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Thread); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tracecap_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Process); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tracecap_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectSpaceSample); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tracecap_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StackFrame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tracecap_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StackSample); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tracecap_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpanSample); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tracecap_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tracecap_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThreadSample); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tracecap_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraceFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_tracecap_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*Metadata_MetaString)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tracecap_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tracecap_proto_goTypes,
		DependencyIndexes: file_tracecap_proto_depIdxs,
		EnumInfos:         file_tracecap_proto_enumTypes,
		MessageInfos:      file_tracecap_proto_msgTypes,
	}.Build()
	File_tracecap_proto = out.File
	file_tracecap_proto_rawDesc = nil
	file_tracecap_proto_goTypes = nil
	file_tracecap_proto_depIdxs = nil
}
